<?xml version="1.0" encoding="utf-8" ?>
<!-- Cf.
  * http://blogs.msdn.com/b/webdev/archive/2013/09/22/web-publish-how-to-automate-multi-project-publish-with-file-system.aspx
  * https://github.com/sayedihashimi/publish-samples
  * http://www.hanselman.com/blog/TinyHappyFeatures3PublishingImprovementsChainedConfigTransformsAndDeployingASPNETAppsFromTheCommandLine.aspx
  * http://www.asp.net/mvc/tutorials/deployment/visual-studio-web-deployment/deploying-extra-files
  * http://msdn.microsoft.com/en-us/library/ee942158.aspx
  * http://stackoverflow.com/questions/11198252/msbuild-task-with-aftertargets-to-encrypt-web-config-after-transform
  TODO:
  * compilation conditionnelle
  * compilation incrémentale
  * encrypter les chaînes de connection + custom machineKey per publish target
  * add custom deploy script
  * BuildInParallel ?
  * multiples plateformes : x64, x86 & co ?
  * supprimer _PublishedWebsites
  -->
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project=".\libexec\Chiffon.settings.targets" />
  <Import Project=".\libexec\Chiffon.helpers.targets" />
  <Import Project=".\libexec\Chiffon.Tasks.targets" />

  <!-- Macros -->

  <PropertyGroup>
    <Configuration Condition="$(Configuration) == ''">Release</Configuration>
    <Platform Condition="$(Platform) == ''">Any CPU</Platform>
    <BuildInParallel Condition="$(BuildInParallel) != 'true'">false</BuildInParallel>

    <!-- Valeurs possibles : Major, Minor, Patch, None -->
    <Milestone Condition="$(Milestone) == ''">None</Milestone>

    <!-- Aujourd'hui, on a une seule valeur possible pour PublishTarget: Production -->
    <PublishTarget Condition="$(PublishTarget) == ''">Production</PublishTarget>

    <!-- Compilation conditionnelle -->
    <BuildAssets Condition="$(BuildAssets) != 'false'">true</BuildAssets>
    <BuildSolution Condition="$(BuildSolution) != 'false'">true</BuildSolution>

    <!-- Publication conditionnelle -->
    <PublishAssets Condition="$(PublishAssets) != 'false'">true</PublishAssets>
    <PublishMediaSite Condition="$(PublishMediaSite) != 'false'">true</PublishMediaSite>
    <PublishWebSite Condition="$(PublishWebSite) != 'false'">true</PublishWebSite>
  </PropertyGroup>

  <!-- Directives publiques -->

  <Target Name="Clean" DependsOnTargets="$(CleanDependsOn)">
    <MSBuild Projects="@(_ProjectsToBuild)" Targets="Clean" />
  </Target>

  <Target Name="Build" DependsOnTargets="$(BuildDependsOn)">
    <MSBuild Projects="@(_ProjectsToBuild)" Targets="Build" />
  </Target>

  <Target Name="Rebuild" DependsOnTargets="Clean;Build" />

  <!--
  <Target Name="_BuildViews" DependsOnTargets="Build">
    <MSBuild Projects="$(SourceDir)Chiffon.WebSite\Chiffon.WebSite.csproj"
              Targets="MvcBuildViews" Properties="$(_BuildProperties);MvcBuildViews=true" />
  </Target>
  -->

  <Target Name="RunTests" DependsOnTargets="Build">
    <Message Text="RunTests not yet done..." Importance="High" />
  </Target>

  <Target Name="FullBuild" DependsOnTargets="Build;RunTests" />

  <Target Name="Publish" DependsOnTargets="Clean">
    <MSBuild Projects="@(_ProjectsToPublish)" Targets="Build" />
  </Target>

  <!-- Dépendances pour Clean -->

  <PropertyGroup>
    <CleanDependsOn>
      _GetProjectsToBuild
    </CleanDependsOn>
  </PropertyGroup>

  <Target Name="_BeforeClean" BeforeTargets="Clean" DependsOnTargets="$(BeforeCleanDependsOn)" />

  <PropertyGroup>
    <BeforeCleanDependsOn>
      _RemoveOutDir;
      _RemovePublishDir
    </BeforeCleanDependsOn>
  </PropertyGroup>

  <!-- Dépendances pour Build -->

  <PropertyGroup>
    <BuildDependsOn>
      _UpdateVersionNumber;
      _GetProjectsToBuild
    </BuildDependsOn>
  </PropertyGroup>

  <Target Name="_BeforeBuild" BeforeTargets="Build" DependsOnTargets="$(BeforeBuildDependsOn)" />

  <PropertyGroup>
    <BeforeBuildDependsOn>
      _CreateOutDir
    </BeforeBuildDependsOn>
  </PropertyGroup>

  <Target Name="_AfterBuild" AfterTargets="Build" DependsOnTargets="$(AfterBuildDependsOn)" />

  <PropertyGroup>
    <AfterBuildDependsOn>
      _VerifyAssemblies
    </AfterBuildDependsOn>
  </PropertyGroup>

  <!-- Dépendances pour Publish -->

  <PropertyGroup>
    <PublishDependsOn>
      _ValidateMilestoneForPublish;
      Clean;
      _UpdateVersionNumber;
      _GetProjectsToPublish
    </PublishDependsOn>
  </PropertyGroup>

  <Target Name="_BeforePublish" BeforeTargets="Publish" DependsOnTargets="$(BeforePublishDependsOn)" />

  <PropertyGroup>
    <BeforePublishDependsOn>
      _CreatePublishDir;
      _CreatePackageDir
    </BeforePublishDependsOn>
  </PropertyGroup>

  <Target Name="_AfterPublish" AfterTargets="Publish" DependsOnTargets="$(AfterPublishDependsOn)" />

  <PropertyGroup>
    <AfterPublishDependsOn>
      _VerifyAspNetAssemblies;
      _Package
    </AfterPublishDependsOn>
  </PropertyGroup>

  <!-- Cibles privées -->

  <Target Name="_CreateOutDir">
    <MakeDir Directories="$(OutDir)" Condition="!Exists($(OutDir))" />
  </Target>

  <Target Name="_CreatePublishDir">
    <MakeDir Directories="$(PublishDir)" Condition="!Exists($(PublishDir))" />
  </Target>

  <Target Name="_CreatePackageDir">
    <MakeDir Directories="$(PackageDir)" Condition="!Exists($(PackageDir))" />
  </Target>

  <!-- Configuration de la compilation -->
  <Target Name="_GetBuildProperties">
    <PropertyGroup>
      <_BuildProperties>
        Configuration=$(Configuration);
        OutDir=$(OutDir);
        Platform=$(Platform);
        BuildInParallel=$(BuildInParallel)
      </_BuildProperties>
    </PropertyGroup>
  </Target>

  <!-- Configuration de la minification -->
  <Target Name="_GetMinifyProperties" DependsOnTargets="_GetSemVer">
    <PropertyGroup>
      <_MinifyProperties>
        YuiCompressorJar=$(YuiCompressorJar);
        GoogleClosureJar=$(GoogleClosureJar);
        SemVer=$(_SemVer)
      </_MinifyProperties>
    </PropertyGroup>
  </Target>

  <!-- Liste des projets à compiler -->
  <Target Name="_GetProjectsToBuild" DependsOnTargets="_GetBuildProperties;_GetMinifyProperties">
    <ItemGroup>
      <_ProjectsToBuild Include="$(SourceDir)Chiffon.WebSite\assets\Chiffon.Assets.proj"
        Condition="$(BuildAssets) == 'true'">
        <AdditionalProperties>$(_MinifyProperties)</AdditionalProperties>
      </_ProjectsToBuild>

      <_ProjectsToBuild Include="$(RootDir)Chiffon.sln"
        Condition="$(BuildSolution) == 'true'">
        <AdditionalProperties>$(_BuildProperties)</AdditionalProperties>
      </_ProjectsToBuild>
    </ItemGroup>
  </Target>

  <!-- Liste des projets à publier (vers le système de fichier) -->
  <Target Name="_GetProjectsToPublish" DependsOnTargets="_GetPublishProperties;_GetMinifyProperties">
    <ItemGroup>
      <_ProjectsToPublish Include="$(SourceDir)Chiffon.WebSite\assets\Chiffon.Assets.proj"
        Condition="$(PublishAssets) == 'true'">
        <AdditionalProperties>
          $(_MinifyProperties);
          $(_PublishProperties);
          PublishUrl=$(PublishDir)wznw.org_chiffon\
        </AdditionalProperties>
      </_ProjectsToPublish>

      <_ProjectsToPublish Include="$(SourceDir)Chiffon.WebSite\Chiffon.WebSite.csproj"
        Condition="$(PublishMediaSite) == 'true'">
        <AdditionalProperties>
          $(_PublishProperties);
          PublishUrl=$(PublishDir)pourquelmotifsimone.com\;
          PublishProfile=$(PublishProfileDir)Chiffon.WebSite.pubxml
        </AdditionalProperties>
      </_ProjectsToPublish>

      <_ProjectsToPublish Include="$(SourceDir)Chiffon.MediaSite\Chiffon.MediaSite.csproj"
        Condition="$(PublishWebSite) == 'true'">
        <AdditionalProperties>
          $(_PublishProperties);
          PublishUrl=$(PublishDir)s.pourquelmotifsimone.com\;
          PublishProfile=$(PublishProfileDir)Chiffon.MediaSite.pubxml
        </AdditionalProperties>
      </_ProjectsToPublish>
    </ItemGroup>
  </Target>

  <!-- Configuration de la publication -->
  <Target Name="_GetPublishProperties" DependsOnTargets="$(_GetBuildProperties)">
    <PropertyGroup>
      <_PublishProperties>
        $(_BuildProperties);
        TransformsDir=$(TransformsDir);
        PublishTarget=$(PublishTarget);
        <!-- Configuration de MSBuild -->
        OutputPath=$(OutDir);
        DeployOnBuild=true;
        <!-- On force la valeur de VisualStudioVersion, sinon MSBuild refuse de publier le projet -->
        VisualStudioVersion=11.0;

        <!-- Configuration commune à tous les profils de publication -->
        WebPublishMethod=FileSystem;
        DebugSymbols=true;
        DeleteAppCodeCompiledFiles=true;
        DeleteExistingFiles=true;
        DeployTarget=WebPublish;
        EnableUpdateable=false;
        ExcludeApp_Data=true;
        <!-- On garde aussi les fichiers debug des autres projets -->
        ExcludeGeneratedDebugSymbol=false;
        PrecompileBeforePublish=true;
        UseMerge=true;
        WDPMergeOption=MergeAllOutputsToASingleAssembly
      </_PublishProperties>
    </PropertyGroup>
  </Target>

  <!--- Récupération du numéro de version sémantique -->
  <Target Name="_GetSemVer">
    <GetSemVer VersionInfoXml="$(EtcDir)VersionInfo.xml">
      <Output PropertyName="_SemVer" TaskParameter="SemVer" />
    </GetSemVer>
  </Target>

  <Target Name="_Package" DependsOnTargets="_GetSemVer">
    <PropertyGroup>
      <_PackageFile>$(PackageDir)chiffon-$(SemVer)-$(PublishTarget).7z</_PackageFile>
    </PropertyGroup>

    <Delete Files="$(_PackageFile)" />
    <Exec Command="$(SevenZipExe) -mx9 a $(_PackageFile) $(PublishDir)\*" ContinueOnError="false"/>
  </Target>

  <Target Name="_RemoveOutDir">
    <RemoveDir Directories="$(OutDir)" Condition="Exists($(OutDir))" />
  </Target>

  <Target Name="_RemovePublishDir">
    <RemoveDir Directories="$(PublishDir)" Condition="Exists($(PublishDir))" />
  </Target>

  <Target Name="_UpdateVersionNumber">
    <UpdateVersion
      VersionInfoXml="$(EtcDir)VersionInfo.xml"
      AssemblyInfoTemplate="$(EtcDir)AssemblyInfo.Template.cs"
      AssemblyInfoFile="$(EtcDir)AssemblyInfo.Version.cs"
      Milestone="$(Milestone)">
    </UpdateVersion>
  </Target>

  <Target Name="_ValidateMilestoneForPublish">
    <Error Text="The property 'Milestone' must be set to something different to 'None'."
           Condition="$(Milestone) == 'None'"/>
  </Target>

  <Target Name="_VerifyAspNetAssemblies" DependsOnTargets="GetPEVerify">
    <ItemGroup>
      <_AspFiles Include="$(PublishDir)**\Chiffon.*.AspNet.dll" />
    </ItemGroup>

    <!-- NB: On ne vérifie pas les metadonnées car "aspnet_merge.exe" produit des assemblées
         "incorrectes" de ce point de vue là -->
    <Exec Command="$(PEVerifyExe) &quot;%(_AspFiles.FullPath)&quot; /nologo /il /unique"
          ContinueOnError="false" />
  </Target>

  <Target Name="_VerifyAssemblies" DependsOnTargets="GetPEVerify">
    <ItemGroup>
      <_BinaryFiles Include="$(OutDir)**\Chiffon*.dll"
                    Exclude="$(OutDir)_PublishedWebsites\**\*"/>
    </ItemGroup>

    <!-- On supprime les doublons -->
    <RemoveDuplicates Inputs="@(_BinaryFiles)">
      <Output TaskParameter="Filtered" ItemName="_AssemblyFiles"/>
    </RemoveDuplicates>

    <Exec Command="$(PEVerifyExe) &quot;%(_AssemblyFiles.FullPath)&quot; /nologo /md /il /unique"
          ContinueOnError="false" />
  </Target>

</Project>
