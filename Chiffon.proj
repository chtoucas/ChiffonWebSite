<?xml version="1.0" encoding="utf-8" ?>
<!-- Cf.
  * http://blogs.msdn.com/b/webdev/archive/2013/09/22/web-publish-how-to-automate-multi-project-publish-with-file-system.aspx
  * https://github.com/sayedihashimi/publish-samples
  * http://www.hanselman.com/blog/TinyHappyFeatures3PublishingImprovementsChainedConfigTransformsAndDeployingASPNETAppsFromTheCommandLine.aspx
  * http://www.asp.net/mvc/tutorials/deployment/visual-studio-web-deployment/deploying-extra-files
  * http://msdn.microsoft.com/en-us/library/ee942158.aspx
  * http://stackoverflow.com/questions/11198252/msbuild-task-with-aftertargets-to-encrypt-web-config-after-transform
  TODO:
  * encrypter les chaînes de connection + custom machineKey per publish target
  * permettre de ne sélectionner qu'une partie des projets
  * add custom deploy script
  * BuildInParallel ?
  * multiples plateformes : x64, x86 & co ?
  * supprimer _PublishedWebsites
  -->
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project=".\libexec\Chiffon.Tasks.Targets" />

  <!-- Macros -->

  <PropertyGroup>
    <Configuration Condition="$(Configuration) == ''">Release</Configuration>
    <Platform Condition="$(Platform) == ''">Any CPU</Platform>

    <MinifyOnly Condition="$(MinifyOnly) != 'true'">false</MinifyOnly>

    <!-- Valeurs possibles : Major, Minor, Patch, None -->
    <Milestone Condition="$(Milestone) == ''">None</Milestone>

    <!-- Aujourd'hui, on a une seule valeur possible pour PublishTarget: Production -->
    <PublishTarget Condition="$(PublishTarget) == ''">Production</PublishTarget>
  </PropertyGroup>

  <!-- Répertoires -->

  <PropertyGroup>
    <RootDir>$(MSBuildProjectDirectory)\</RootDir>

    <!-- Répertoires temporaires -->
    <BuildDir>$(RootDir)\_build\</BuildDir>
    <!-- NB: D'après Microsoft.Common.targets, on doit utiliser OutDir plutôt qu'OutputPath -->
    <OutDir>$(BuildDir)$(Configuration)\</OutDir>
    <PublishDir>$(BuildDir)Publish\</PublishDir>
    <PackageDir>$(BuildDir)Packages\</PackageDir>

    <EtcDir>$(RootDir)etc\</EtcDir>
    <SourceDir>$(RootDir)src\</SourceDir>
    <ToolsDir>$(RootDir)tools\</ToolsDir>

    <PublishProfilesDir>$(EtcDir)PublishProfiles\</PublishProfilesDir>

    <!-- WARNING: Ce répertoire n'est pas inclus dans l'entrepôt Git
                  car il contient toutes les configurations privées. -->
    <TransformsDir>$(RootDir)intern\transforms\</TransformsDir>
  </PropertyGroup>

  <!-- Outils locaux (exe ou jar) -->

  <PropertyGroup>
    <SevenZipExe>$(ToolsDir)7-zip\7za.exe</SevenZipExe>
    <GoogleClosureJar>$(ToolsDir)closure\compiler.jar</GoogleClosureJar>
    <YuiCompressorJar>$(ToolsDir)yuicompressor\build\yuicompressor-2.4.7.jar</YuiCompressorJar>
  </PropertyGroup>

  <!-- Configuration de la compilation -->

  <PropertyGroup>
    <BuildProperties>
      Configuration=$(Configuration);
      OutDir=$(OutDir);
      Platform=$(Platform)
    </BuildProperties>
  </PropertyGroup>

  <!-- Configuration de la publication -->

  <PropertyGroup>
    <PublishProperties>
      $(BuildProperties);
      TransformsDir=$(TransformsDir);
      PublishTarget=$(PublishTarget);
      <!-- Configuration de MSBuild -->
      OutputPath=$(OutDir);
      DeployOnBuild=true;
      <!-- On force la valeur de VisualStudioVersion, sinon MSBuild refuse de publier le projet -->
      VisualStudioVersion=11.0;

      <!-- Configuration commune à tous les profils de publication -->
      WebPublishMethod=FileSystem;
      DebugSymbols=true;
      DeleteAppCodeCompiledFiles=true;
      DeleteExistingFiles=true;
      DeployTarget=WebPublish;
      EnableUpdateable=false;
      ExcludeApp_Data=true;
      <!-- On garde aussi les fichiers debug des autres projets -->
      ExcludeGeneratedDebugSymbol=false;
      PrecompileBeforePublish=true;
      UseMerge=true;
      WDPMergeOption=MergeAllOutputsToASingleAssembly
    </PublishProperties>
  </PropertyGroup>

  <!-- Configuration de la minification -->

  <PropertyGroup>
    <MinifyProperties>
      YuiCompressorJar=$(YuiCompressorJar);
      GoogleClosureJar=$(GoogleClosureJar)
    </MinifyProperties>
  </PropertyGroup>

  <!-- Liste des projets à compiler -->

  <ItemGroup>
    <ProjectsToBuild Include="$(SourceDir)Chiffon.WebSite\assets\Chiffon.Assets.proj">
      <AdditionalProperties>
        $(MinifyProperties)
      </AdditionalProperties>
    </ProjectsToBuild>
    <!-- TODO: Il semble que pour une solution on ne peut pas ajouter automatiquement
         'AdditionalProperties' -->
    <ProjectsToBuild Include="$(RootDir)Chiffon.sln" Condition="$(MinifyOnly) != 'true'" />
  </ItemGroup>

  <!-- Liste des projets à publier vers le système de fichier -->

  <ItemGroup>
    <ProjectsToPublish Include="$(SourceDir)Chiffon.WebSite\assets\Chiffon.Assets.proj">
      <AdditionalProperties>
        $(MinifyProperties);
        $(PublishProperties);
        PublishUrl=$(PublishDir)wznw.org_chiffon\
      </AdditionalProperties>
    </ProjectsToPublish>

    <ProjectsToPublish Include="$(SourceDir)Chiffon.WebSite\Chiffon.WebSite.csproj">
      <AdditionalProperties>
        $(PublishProperties);
        PublishUrl=$(PublishDir)pourquelmotifsimone.com\;
        PublishProfile=$(PublishProfilesDir)Chiffon.WebSite.$(PublishTarget).pubxml
      </AdditionalProperties>
    </ProjectsToPublish>

    <ProjectsToPublish Include="$(SourceDir)Chiffon.MediaSite\Chiffon.MediaSite.csproj">
      <AdditionalProperties>
        $(PublishProperties);
        PublishUrl=$(PublishDir)s.pourquelmotifsimone.com\;
        PublishProfile=$(PublishProfilesDir)Chiffon.MediaSite.$(PublishTarget).pubxml
      </AdditionalProperties>
    </ProjectsToPublish>
  </ItemGroup>

  <!-- Cibles publiques -->

  <Target Name="Clean">
    <MSBuild Projects="@(ProjectsToBuild)" Targets="Clean" Properties="$(BuildProperties)"/>
  </Target>

  <Target Name="Build">
    <MSBuild Projects="@(ProjectsToBuild)" Properties="$(BuildProperties);SemVer=$(SemVer)"/>
  </Target>

  <Target Name="Rebuild" DependsOnTargets="Clean;Build" />

  <!--
  <Target Name="_BuildViews" DependsOnTargets="Build">
    <MSBuild Projects="$(SourceDir)Chiffon.WebSite\Chiffon.WebSite.csproj"
              Targets="MvcBuildViews" Properties="$(BuildProperties);MvcBuildViews=true" />
  </Target>
  -->

  <Target Name="RunTests" DependsOnTargets="Build">
    <Message Text="Not yet done" Importance="High" />
  </Target>

  <Target Name="FullBuild" DependsOnTargets="Build;_VerifyAssemblies;RunTests" />

  <Target Name="Publish" DependsOnTargets="Clean">
    <MSBuild Projects="@(ProjectsToPublish)" Properties="SemVer=$(SemVer)" />
  </Target>

  <!-- Avant ou après une cible -->

  <Target Name="_BeforeClean" BeforeTargets="Clean" DependsOnTargets="$(_BeforeCleanDependsOn)" />

  <Target Name="_BeforeBuild" BeforeTargets="Build" DependsOnTargets="$(_BeforeBuildDependsOn)" />

  <Target Name="_BeforePublish" BeforeTargets="Publish" DependsOnTargets="$(_BeforePublishDependsOn)" />
  <Target Name="_AfterPublish" AfterTargets="Publish" DependsOnTargets="$(_AfterPublishDependsOn)" />

  <!-- Dépendances -->

  <PropertyGroup>
    <_BeforeCleanDependsOn>
      _RemoveOutDir;
      _RemovePublishDir
    </_BeforeCleanDependsOn>
  </PropertyGroup>

  <PropertyGroup>
    <_BeforeBuildDependsOn>
      _CreateOutDir;
      _UpdateVersionNumber
    </_BeforeBuildDependsOn>
  </PropertyGroup>

  <PropertyGroup>
    <_BeforePublishDependsOn>
      _ValidateMilestone;
      _CreatePublishDir;
      _CreatePackageDir;
      _UpdateVersionNumber
    </_BeforePublishDependsOn>
  </PropertyGroup>

  <PropertyGroup>
    <_AfterPublishDependsOn>
      _VerifyAspNetAssemblies;
      _Package
    </_AfterPublishDependsOn>
  </PropertyGroup>

  <!-- Cibles privées -->

  <Target Name="_CreateOutDir">
    <MakeDir Directories="$(OutDir)" Condition="!Exists($(OutDir))" />
  </Target>

  <Target Name="_CreatePublishDir">
    <MakeDir Directories="$(PublishDir)" Condition="!Exists($(PublishDir))" />
  </Target>

  <Target Name="_CreatePackageDir">
    <MakeDir Directories="$(PackageDir)" Condition="!Exists($(PackageDir))" />
  </Target>

  <!--<Target Name="_EncryptConfigs" DependsOnTargets="_GetAspNetRegIis;_GetPEVerify">
    <ItemGroup>
      <_WebSites Include="$(PublishDir)pourquelmotifsimone.com" />
      <_WebSites Include="$(PublishDir)s.pourquelmotifsimone.com" />
    </ItemGroup>

    --><!--<Exec Command="$(AspNetRegIis) -pef &quot;connectionStrings&quot; &quot;%(_WebSites.FullPath)&quot; -prov &quot;RsaProvider&quot;" />--><!--
  </Target>-->

  <Target Name="_GetAspNetRegIis">
    <GetFrameworkPath>
      <Output TaskParameter="FrameworkVersion40Path" PropertyName="_FxPath" />
    </GetFrameworkPath>

    <PropertyGroup>
      <AspNetRegIis>$(_FxPath)\aspnet_regiis.exe</AspNetRegIis>
    </PropertyGroup>
  </Target>

  <Target Name="_GetPEVerify">
    <GetFrameworkSdkPath>
      <Output TaskParameter="FrameworkSdkVersion40Path" PropertyName="_SdkPath" />
    </GetFrameworkSdkPath>

    <PropertyGroup>
      <_NetFxTools>$(_SdkPath)Bin\NETFX 4.0 Tools\</_NetFxTools>
    </PropertyGroup>

    <PropertyGroup>
      <PEVerifyExe>"$(_NetFxTools)peverify.exe"</PEVerifyExe>
    </PropertyGroup>
  </Target>

  <Target Name="_Package">
    <PropertyGroup>
      <_PackageFile>$(PackageDir)chiffon-$(SemVer)-$(PublishTarget).7z</_PackageFile>
    </PropertyGroup>

    <Delete Files="$(_PackageFile)" />
    <Exec Command="$(SevenZipExe) -mx9 a $(_PackageFile) $(PublishDir)\*" ContinueOnError="false"/>
  </Target>

  <Target Name="_RemoveOutDir">
    <RemoveDir Directories="$(OutDir)" Condition="Exists($(OutDir))" />
  </Target>

  <Target Name="_RemovePublishDir">
    <RemoveDir Directories="$(PublishDir)" Condition="Exists($(PublishDir))" />
  </Target>

  <Target Name="_UpdateVersionNumber">
    <UpdateVersion
      VersionInfoXml="$(EtcDir)VersionInfo.xml"
      AssemblyInfoTemplate="$(EtcDir)AssemblyInfo.Template.cs"
      AssemblyInfoFile="$(EtcDir)AssemblyInfo.Version.cs"
      Milestone="$(Milestone)">
    </UpdateVersion>
    <GetSemVer VersionInfoXml="$(EtcDir)VersionInfo.xml">
      <Output PropertyName="SemVer" TaskParameter="SemVer" />
    </GetSemVer>
  </Target>

  <Target Name="_ValidateMilestone">
    <Error Text="The property 'Milestone' must be set to something different to 'None'."
           Condition="$(Milestone) == 'None'"/>
  </Target>

  <Target Name="_VerifyAspNetAssemblies" DependsOnTargets="_GetPEVerify">
    <ItemGroup>
      <_AspFiles Include="$(PublishDir)**\Chiffon.*.AspNet.dll" />
    </ItemGroup>

    <!-- NB: On ne vérifie pas les metadonnées car "aspnet_merge.exe" produit des assemblées
         "incorrectes" de ce point de vue là -->
    <Exec Command="$(PEVerifyExe) %(_AspFiles.FullPath) /nologo /il /unique"
          ContinueOnError="false" />
  </Target>

  <Target Name="_VerifyAssemblies" DependsOnTargets="_GetPEVerify">
    <ItemGroup>
      <_BinaryFiles Include="$(OutDir)**\Chiffon.*.dll"
                    Exclude="$(OutDir)_PublishedWebsites\**\*"/>
    </ItemGroup>

    <!-- On supprime les doublons -->
    <RemoveDuplicates Inputs="@(_BinaryFiles)">
      <Output TaskParameter="Filtered" ItemName="_AssemblyFiles"/>
    </RemoveDuplicates>

    <Exec Command="$(PEVerifyExe) %(_AssemblyFiles.FullPath) /nologo /md /il /unique"
          ContinueOnError="false" />
  </Target>

</Project>
