<?xml version="1.0" encoding="utf-8" ?>
<Project ToolsVersion="12.0" DefaultTargets="Package" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- Define common MSBuild project options. -->
  <PropertyGroup>
    <Configuration Condition="'$(Configuration)' == ''">Release</Configuration>
    <Platform Condition="'$(Platform)' == ''">Any CPU</Platform>
    <BuildInParallel Condition="'$(BuildInParallel)' == '' And $(MSBuildNodeCount) &gt; 1">true</BuildInParallel>
    <BuildInParallel Condition="'$(BuildInParallel)' == ''">false</BuildInParallel>
  </PropertyGroup>

  <!-- Define Chiffon options. -->
  <PropertyGroup>
    <!-- Valeurs possibles : Production, Integration. -->
    <PackageTarget Condition="'$(PackageTarget)' == ''">Production</PackageTarget>
  </PropertyGroup>

  <!-- Define Chiffon properties. -->
  <PropertyGroup>
    <RepositoryDir>$(MSBuildThisFileDirectory)..\</RepositoryDir>
    <SourceDir>$(RepositoryDir)src\</SourceDir>
    <PackagesDir>$(RepositoryDir)packages\</PackagesDir>
    <ToolsDir>$(RepositoryDir)tools\</ToolsDir>
    <PublishProfileDir>$(MSBuildThisFileDirectory)</PublishProfileDir>

    <!-- Répertoires temporaires créés au cours de la compilation. -->
    <ArtefactsDir>$(RepositoryDir)_artefacts\</ArtefactsDir>
    <WorkDir>$(RepositoryDir)_work\</WorkDir>
    <OutDir>$(WorkDir)bin\$(Configuration)\</OutDir>
    <BaseIntermediateOutDir>$(WorkDir)obj\</BaseIntermediateOutDir>
    <StageDir>$(WorkDir)stage\</StageDir>

    <!-- WARNING: Ce répertoires n'est pas inclus dans l'entrepôt Git maître
         car il contient toutes les données confidentielles. -->
    <TransformsDir>$(RepositoryDir)intern\transforms\</TransformsDir>

    <BuildTimeFile>$(WorkDir).buildTime</BuildTimeFile>
  </PropertyGroup>

  <!-- Outils locaux (exe). -->
  <ItemGroup>
    <_NuGetExe Include="$(PackagesDir)NuGet.CommandLine.*\tools\nuget.exe" />
  </ItemGroup>
  <PropertyGroup>
    <GruntCmd>$(ToolsDir)grunt.cmd</GruntCmd>
    <NuGetExe>@(_NuGetExe)</NuGetExe>
    <SevenZipExe>$(ToolsDir)7za.exe</SevenZipExe>
  </PropertyGroup>

  <!-- Define the BuildProperties property. -->
  <PropertyGroup>
    <BuildProperties>
      Configuration=$(Configuration);
      OutDir=$(OutDir);
      <!-- NB: D'après Microsoft.Common.targets, on doit utiliser "OutDir" plutôt qu'"OutputPath".
           Pour les projets Web, choisir la même valeur pour "OutDir" et "OutputPath" permet
           aussi d'éviter la création de "_PublishedWebsites". -->
      OutputPath=$(OutDir);
      BaseIntermediateOutputPath=$(BaseIntermediateOutDir);
      Platform=$(Platform);
      BuildInParallel=$(BuildInParallel);
      <!-- On force la valeur de "VisualStudioVersion", sinon MSBuild refusera de publier le projet.
           Cela est aussi nécessaire pour Typescript.
           Cf. http://sedodream.com/2012/08/19/VisualStudioProjectCompatabilityAndVisualStudioVersion.aspx -->
      VisualStudioVersion=12.0
    </BuildProperties>
  </PropertyGroup>

  <!-- Define the ProjectsToPackage items. -->
  <ItemGroup>
    <ProjectsToPackage Include="$(SourceDir)Chiffon\Chiffon.csproj">
      <AdditionalProperties>
        $(BuildProperties)
      </AdditionalProperties>
    </ProjectsToPackage>

    <ProjectsToPackage Include="$(SourceDir)Chiffon.WebSite\assets\Chiffon.Assets.proj">
      <AdditionalProperties>
        DeployOnBuild=true;
        PublishUrl=$(StageDir)wznw.org_chiffon\
      </AdditionalProperties>
    </ProjectsToPackage>

    <ProjectsToPackage Include="$(SourceDir)Chiffon.WebSite\Chiffon.WebSite.csproj">
      <AdditionalProperties>
        $(BuildProperties);
        TransformsDir=$(TransformsDir);
        PackageTarget=$(PackageTarget);
        <!-- Configuration de MSBuild. -->
        DeployOnBuild=true;

        <!-- Configuration commune à tous les profils. -->
        WebPublishMethod=FileSystem;
        DebugSymbols=true;
        DeleteAppCodeCompiledFiles=true;
        DeleteExistingFiles=true;
        DeployTarget=WebPublish;
        EnableUpdateable=false;
        ExcludeApp_Data=true;
        <!-- On garde les fichiers debug liés aux autres assemblées. -->
        ExcludeGeneratedDebugSymbol=false;
        PrecompileBeforePublish=true;
        UseMerge=true;
        WDPMergeOption=MergeAllOutputsToASingleAssembly;

        PublishUrl=$(StageDir)vivianedevaux.org_simone\;
        PublishProfile=$(PublishProfileDir)Chiffon.WebSite.pubxml
      </AdditionalProperties>
    </ProjectsToPackage>

  </ItemGroup>

  <!-- Clean target -->
  <Target Name="Clean">
    <ItemGroup>
      <_FilesToRemove Include="$(WorkDir)**\*"/>
    </ItemGroup>

    <Delete Files="@(_FilesToRemove)" />
    <RemoveDir Directories="$(WorkDir)" Condition="Exists($(WorkDir))" />

    <MSBuild Projects="$(SourceDir)Chiffon.WebSite\assets\Chiffon.Assets.proj" Targets="Clean" />
  </Target>

  <!-- Grunt target -->
  <Target Name="Grunt">
    <Message Text="Building assets with Grunt..." Importance="high" />

    <Exec Command="$(GruntCmd) build >> build.log" ContinueOnError="false"  />
  </Target>

  <!-- Build target -->
  <Target Name="Build">
    <Message Text="Restoring NuGet packages..." Importance="high" />
    <Exec Command="&quot;$(NuGetExe)&quot; restore &quot;$(RepositoryDir)Chiffon.sln&quot; -Verbosity quiet" />

    <Message Text="Building projects..." Importance="high" />
    <MSBuild Projects="@(ProjectsToPackage)" Targets="Build">
      <Output ItemName="_BuildOutputs" TaskParameter="TargetOutputs" />
    </MSBuild>
  </Target>

  <!-- Package target -->
  <Target Name="Package" DependsOnTargets="Grunt;Build;_VerifyBuildOutputs;_VerifyAspNetMergeOutputs">
    <!-- Récupération du numéro de version des assemblées .NET. -->
    <GetVersionNumber VersionInfoXml="$(RepositoryDir)VersionInfo.xml">
      <Output TaskParameter="VersionNumber" PropertyName="_VersionNumber" />
    </GetVersionNumber>

    <PropertyGroup>
      <_PackageFile>$(ArtefactsDir)chiffon-$(_VersionNumber)-$(PackageTarget).7z</_PackageFile>
    </PropertyGroup>

    <Message Text="Creating package..." Importance="high" />
    <MakeDir Directories="$(ArtefactsDir)" Condition="!Exists($(ArtefactsDir))" />
    <Delete Files="$(_PackageFile)" />

    <Exec Command="$(SevenZipExe) -mx9 a $(_PackageFile) $(StageDir)* >> build.log" ContinueOnError="false"/>
  </Target>

  <!-- _GetPEVerify target -->
  <Target Name="_GetPEVerify">
    <PropertyGroup>
      <PEVerifyExe>&quot;$(SDK40ToolsPath)peverify.exe&quot;</PEVerifyExe>
    </PropertyGroup>
  </Target>

  <!-- _VerifyBuildOutputs target -->
  <Target Name="_VerifyBuildOutputs" DependsOnTargets="_GetPEVerify"
          Inputs="@(_BuildOutputs)"
          Outputs="$(BuildTimeFile)">
    <Message Text="Verifying build outputs with PEVerify." Importance="Low" />

    <Exec Command="$(PEVerifyExe) &quot;%(_BuildOutputs.FullPath)&quot; /nologo /md /il /unique"
          ContinueOnError="false" />

    <!-- NB: Garder cette commande à la fin de cible au cas où une vérification échoue. -->
    <Touch Files="$(BuildTimeFile)" AlwaysCreate="true" />
  </Target>

  <!-- _VerifyAspNetMergeOutputs target -->
  <Target Name="_VerifyAspNetMergeOutputs" DependsOnTargets="_GetPEVerify">
    <Message Text="Verifying 'aspnet_merge' outputs with PEVerify." Importance="Low" />

    <ItemGroup>
      <_AspNetMergeOutputs Include="$(StageDir)**\Chiffon.*.AspNet.dll" />
    </ItemGroup>

    <!-- NB: On ne vérifie pas les metadonnées car "aspnet_merge.exe" peut produire des assemblées
         "incorrectes" de ce point de vue là. -->
    <Exec Command="$(PEVerifyExe) &quot;%(_AspNetMergeOutputs.FullPath)&quot; /nologo /il /unique"
          ContinueOnError="false" />
  </Target>

  <!-- GetVersionNumber task -->
  <UsingTask TaskName="GetVersionNumber" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v12.0.dll">
    <ParameterGroup>
      <VersionInfoXml ParameterType="System.String" Required="true" />
      <VersionNumber ParameterType="System.String" Output="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.Xml" />
      <Reference Include="System.Xml.Linq" />
      <Using Namespace="System" />
      <Using Namespace="System.Globalization" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Xml" />
      <Using Namespace="System.Xml.Linq" />
      <Using Namespace="Microsoft.Build.Framework" />
      <Using Namespace="Microsoft.Build.Utilities" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
if (VersionInfoXml.Length == 0) {
    Log.LogMessage(MessageImportance.High, "You must supply a version file.");
    return false;
}

try {
    XDocument xdoc;
    using (var reader = new StreamReader(VersionInfoXml)) {
        xdoc = XDocument.Load(reader);
    }
    
    var root = xdoc.Root;
    var major = Int16.Parse(root.Element("Major").Value);
    var minor = Int16.Parse(root.Element("Minor").Value);
    var build = Int16.Parse(root.Element("Build").Value);
    VersionNumber = String.Format(CultureInfo.InvariantCulture, "{0}.{1}.{2}", major, minor, build);
}
catch (IOException ex) {
    Log.LogErrorFromException(ex);
}

return !Log.HasLoggedErrors;
]]>
      </Code>
    </Task>
  </UsingTask>
</Project>
