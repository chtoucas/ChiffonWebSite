<?xml version="1.0" encoding="utf-8" ?>
<!--
  TODO:
  * rajouter aux package les scripts de déploiement
  * encrypter les chaînes de connection
  * compilation pour de multiples plateformes ?
  * RestorePackages ?
  * IISExpress, configSource
  -->

<!-- TODO: On ne veut pas mettre à jour la version de compilation si rien n'a changé. En plus,
     cela empêcherait la compilation incrémentale. Il faut donc deviser un processus plus
     intelligent pour savoir quand on doit mettre à jour le numéro de "Build".
     Cf. http://stackoverflow.com/questions/11667510/determine-if-msbuild-corecompile-will-run-and-call-custom-target
-->
<!-- WARNING: L'ordre des directives est extrèmement important. Par exemple, "GetSemVer"
     doit absolument être exécuté après "UpdateVersionNumber". En effet, si une directive dépend
     indirectement de "GetSemVer" et si "UpdateVersionNumber" est lancé après, la valeur de "SemVer"
     devient obsolète. -->

<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project=".\Chiffon.common.targets" />

  <!-- ### Propriétés locales ### -->

  <PropertyGroup>
    <Configuration Condition="'$(Configuration)' == ''">Release</Configuration>
    <Platform Condition="'$(Platform)' == ''">Any CPU</Platform>
    <BuildInParallel Condition="'$(BuildInParallel)' == '' And $(MSBuildNodeCount) &gt; 1">true</BuildInParallel>
    <BuildInParallel Condition="'$(BuildInParallel)' == ''">false</BuildInParallel>

    <MvcBuildViews Condition="'$(MvcBuildViews)' != 'false'">true</MvcBuildViews>
    <RunTests Condition="'$(RunTests)' != 'false'">true</RunTests>

    <!-- Valeurs possibles : Major, Minor, Patch, Build. -->
    <Milestone Condition="'$(Milestone)' == ''">Build</Milestone>

    <!-- Valeurs possibles : Production, Integration. -->
    <PackageTarget Condition="'$(PackageTarget)' == ''">Production</PackageTarget>

    <!-- Compilation conditionnelle. -->
    <BuildAssets Condition="'$(BuildAssets)' != 'false'">true</BuildAssets>
    <BuildSolution Condition="'$(BuildSolution)' != 'false'">true</BuildSolution>

    <!-- Packaging conditionnel. -->
    <PackageAssets Condition="'$(PackageAssets)' != 'false'">true</PackageAssets>
    <PackageMediaSite Condition="'$(PackageMediaSite)' != 'false'">true</PackageMediaSite>
    <PackageWebSite Condition="'$(PackageWebSite)' != 'false'">true</PackageWebSite>
  </PropertyGroup>

  <!-- ### Directives publiques ### -->

  <Target Name="Clean" DependsOnTargets="CleanBuild;CleanPackage" />

  <Target Name="DeepClean" DependsOnTargets="Clean">
    <ItemGroup>
      <_FilesToDelete Include="$(BuildDir)**\*"/>
    </ItemGroup>

    <Delete Files="@(_FilesToDelete)" />

    <RemoveDir Directories="$(BuildDir)" Condition="Exists($(BuildDir))" />

    <MSBuild Projects="$(AssetsProject)" Targets="DeepClean" />
  </Target>

  <Target Name="CleanBuild" DependsOnTargets="GetProjectsToBuild">
    <MSBuild Projects="@(ProjectsToBuild)" Targets="Clean" />
  </Target>

  <Target Name="Build" DependsOnTargets="GetProjectsToBuild">
    <MSBuild Projects="@(ProjectsToBuild)" Targets="Build" StopOnFirstFailure="true">
      <Output ItemName="_BuildOutputs" TaskParameter="TargetOutputs" />
    </MSBuild>
  </Target>

  <Target Name="Rebuild" DependsOnTargets="CleanBuild;Build" />

  <Target Name="CleanPackage" DependsOnTargets="GetProjectsToPackage">
    <MSBuild Projects="@(ProjectsToPackage)" Targets="Clean" />
  </Target>

  <Target Name="CorePackage" DependsOnTargets="GetProjectsToPackage">
    <MSBuild Projects="@(ProjectsToPackage)" Targets="Build" StopOnFirstFailure="true">
      <Output ItemName="_BuildOutputs" TaskParameter="TargetOutputs" />
    </MSBuild>
  </Target>

  <Target Name="Package" DependsOnTargets="_PrePackage;CleanPackage;CorePackage;_PostPackage" />

  <Target Name="Repackage" DependsOnTargets="_PreRepackage;CleanPackage;CorePackage;_PostPackage" />

  <Target Name="Integrate" DependsOnTargets="_PreIntegrate;CleanPackage;CorePackage" />

  <!-- ### Directives connexes ### -->

  <Target Name="BeforeBuild" BeforeTargets="Build" DependsOnTargets="$(BeforeBuildDependsOn)" />

  <PropertyGroup>
    <BeforeBuildDependsOn>
      EmitProjectSolution
    </BeforeBuildDependsOn>
  </PropertyGroup>

  <Target Name="AfterBuild" AfterTargets="Build" DependsOnTargets="$(AfterBuildDependsOn)" />

  <PropertyGroup>
    <AfterBuildDependsOn>
      _PostBuild
    </AfterBuildDependsOn>
  </PropertyGroup>

  <Target Name="AfterCorePackage" AfterTargets="CorePackage"
          DependsOnTargets="$(AfterCorePackageDependsOn)" />

  <PropertyGroup>
    <AfterCorePackageDependsOn>
      _PostBuild;
      VerifyAspNetMergeOutputs
    </AfterCorePackageDependsOn>
  </PropertyGroup>

  <!-- ### Directives privées ### -->

  <Target Name="_PostBuild"
          Inputs="@(_BuildOutputs)"
          Outputs="$(RootDir).buildTime">
    <CallTarget Targets="VerifyBuildOutputs;RunXunitTests" RunEachTargetSeparately="true" />
    <Touch Files="$(RootDir).buildTime" AlwaysCreate="true" />
  </Target>

  <!-- Packaging -->

  <Target Name="_PrePackage">
    <!-- Lors de la création d'un package, "Milestone" doit être différent de "Build". -->
    <Error Text="The parameter 'Milestone' must not be set to 'Build'." Condition="'$(Milestone)' == 'Build'" />
  </Target>

  <Target Name="_AfterPrePackage" AfterTargets="_PrePackage" DependsOnTargets="UpdateVersionNumber" />

  <Target Name="_PreRepackage">
    <!-- Lors de la mise à jour d'un package, on incrémente uniquement le numéro de "Build". -->
    <PropertyGroup>
      <Milestone>Build</Milestone>
    </PropertyGroup>
  </Target>

  <!-- NB: On ne place la directive suivante dans "_PreRepackage" car "UpdateVersionNumber" n'utiliserait
       pas la version mise à jour de "Milestone". -->
  <Target Name="_AfterPreRepackage" AfterTargets="_PreRepackage" DependsOnTargets="UpdateVersionNumber" />

  <Target Name="_PreIntegrate">
    <PropertyGroup>
      <PackageTarget>Integration</PackageTarget>
    </PropertyGroup>
  </Target>

  <Target Name="_PostPackage" DependsOnTargets="CreatePackageDir;GetVersionNumber">
    <PropertyGroup>
      <_PackageFile>$(PackageDir)chiffon-$(VersionNumber)-$(PackageTarget).7z</_PackageFile>
    </PropertyGroup>

    <Delete Files="$(_PackageFile)" />
    <Exec Command="$(SevenZipExe) -mx9 a $(_PackageFile) $(PublishDir)*" ContinueOnError="false"/>
  </Target>

</Project>
