<?xml version="1.0" encoding="utf-8" ?>
<!-- Cf.
  * http://blogs.msdn.com/b/webdev/archive/2013/09/22/web-publish-how-to-automate-multi-project-publish-with-file-system.aspx
  * https://github.com/sayedihashimi/publish-samples
  * http://www.hanselman.com/blog/TinyHappyFeatures3PublishingImprovementsChainedConfigTransformsAndDeployingASPNETAppsFromTheCommandLine.aspx
  * http://www.asp.net/mvc/tutorials/deployment/visual-studio-web-deployment/deploying-extra-files
  * http://msdn.microsoft.com/en-us/library/ee942158.aspx
  * http://stackoverflow.com/questions/11198252/msbuild-task-with-aftertargets-to-encrypt-web-config-after-transform
  * http://stackoverflow.com/questions/4752293/msbuild-determine-a-solutions-publishedwebsites?rq=1
  TODO:
  * rajouter aux package les scripts de déploiement
  * encrypter les chaînes de connection
  * compilation pour de multiples plateformes ?
  -->

<!-- WARNING: L'ordre des directives est extrèmement important. Par exemple, _GetSemVer
     doit absolument s'exécuter après _UpdateVersionNumber. Ainsi si une directive dépend
     indirectement de _GetSemVer et _UpdateVersionNumber est lancé après, la version utilisée
     devient obsolète. -->

<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project=".\Chiffon.settings.targets" />
  <Import Project=".\Chiffon.helpers.targets" />
  <Import Project=".\Chiffon.Tasks.targets" />

  <!-- ### Propriétés globales -->

  <PropertyGroup>
    <Configuration Condition="'$(Configuration)' == ''">Release</Configuration>
    <Platform Condition="'$(Platform)' == ''">Any CPU</Platform>
    <BuildInParallel Condition="'$(BuildInParallel)' != 'true'">false</BuildInParallel>

    <!-- Valeurs possibles : Major, Minor, Patch, None -->
    <Milestone Condition="'$(Milestone)' == ''">None</Milestone>

    <!-- Aujourd'hui, on a une seule valeur possible pour PackageTarget: Production -->
    <PackageTarget Condition="'$(PackageTarget)' == ''">Production</PackageTarget>

    <!-- Compilation conditionnelle -->
    <BuildAssets Condition="'$(BuildAssets)' != 'false'">true</BuildAssets>
    <BuildSolution Condition="'$(BuildSolution)' != 'false'">true</BuildSolution>

    <!-- Packaging conditionnelle -->
    <PackageAssets Condition="'$(PackageAssets)' != 'false'">true</PackageAssets>
    <PackageMediaSite Condition="'$(PackageMediaSite)' != 'false'">true</PackageMediaSite>
    <PackageWebSite Condition="'$(PackageWebSite)' != 'false'">true</PackageWebSite>
  </PropertyGroup>

  <!-- ### Directives publiques -->

  <Target Name="Clean" DependsOnTargets="CleanBuild;CleanPackage" />

  <Target Name="CleanBuild" DependsOnTargets="$(CleanBuildDependsOn)">
    <MSBuild Projects="@(_ProjectsToBuild)" Targets="Clean" />
  </Target>

  <Target Name="Build" DependsOnTargets="$(BuildDependsOn)">
    <MSBuild Projects="@(_ProjectsToBuild)" Targets="Build">
      <Output ItemName="_BuildOutputs" TaskParameter="TargetOutputs" />
    </MSBuild>
  </Target>

  <Target Name="Rebuild" DependsOnTargets="CleanBuild;Build" />

  <!--
  <Target Name="_BuildViews" DependsOnTargets="Build">
    <MSBuild Projects="$(SourceDir)Chiffon.WebSite\Chiffon.WebSite.csproj"
              Targets="MvcBuildViews" Properties="$(_BuildProperties);MvcBuildViews=true" />
  </Target>
  -->

  <Target Name="RunTests">
    <Message Text="RunTests not yet done..." Importance="High" />
  </Target>

  <Target Name="CleanPackage" DependsOnTargets="$(CleanPackageDependsOn)">
    <MSBuild Projects="@(_ProjectsToPackage)" Targets="Clean" />
  </Target>

  <Target Name="Package" DependsOnTargets="$(PackageDependsOn)">
    <MSBuild Projects="@(_ProjectsToPackage)" Targets="Build">
      <Output ItemName="_BuildOutputs" TaskParameter="TargetOutputs" />
    </MSBuild>
  </Target>

  <Target Name="Repackage" DependsOnTargets="CleanPackage;Package" />

  <!-- ### Dépendances -->

  <!-- Dépendances pour Clean -->

  <PropertyGroup>
    <CleanBuildDependsOn>
      _GetProjectsToBuild
    </CleanBuildDependsOn>
  </PropertyGroup>

  <Target Name="_BeforeCleanBuild" BeforeTargets="CleanBuild" DependsOnTargets="$(BeforeCleanBuildDependsOn)" />

  <PropertyGroup>
    <BeforeCleanBuildDependsOn>
      _RemoveOutDir
    </BeforeCleanBuildDependsOn>
  </PropertyGroup>

  <!-- Dépendances pour Build -->

  <PropertyGroup>
    <BuildDependsOn>
      <!-- TODO: On ne veut pas mettre à jour la version de compilation si rien n'a changé...
           Il faut deviser un processus plus intelligent pour savoir quand on doit mettre à jour
           le numéro de Build.
           Cf. http://stackoverflow.com/questions/11667510/determine-if-msbuild-corecompile-will-run-and-call-custom-target
      -->
      <!--_ValidateMilestoneForBuild;-->
      <!--_UpdateVersionNumber-->
      _GetProjectsToBuild
    </BuildDependsOn>
  </PropertyGroup>

  <Target Name="_BeforeBuild" BeforeTargets="Build" DependsOnTargets="$(BeforeBuildDependsOn)" />

  <PropertyGroup>
    <BeforeBuildDependsOn>
      _CreateOutDir
    </BeforeBuildDependsOn>
  </PropertyGroup>

  <Target Name="_AfterBuild" AfterTargets="Build" DependsOnTargets="$(AfterBuildDependsOn)" />

  <PropertyGroup>
    <AfterBuildDependsOn>
      _VerifyBuildOutputs
    </AfterBuildDependsOn>
  </PropertyGroup>

  <!-- Dépendances pour CleanPackage -->

  <PropertyGroup>
    <CleanPackageDependsOn>
      _GetProjectsToPackage;
    </CleanPackageDependsOn>
  </PropertyGroup>

  <Target Name="_BeforeCleanPackage" BeforeTargets="CleanPackage" DependsOnTargets="$(BeforeCleanPackageDependsOn)" />

  <PropertyGroup>
    <BeforeCleanPackageDependsOn>
      _RemoveOutDir;
      _RemovePublishDir
    </BeforeCleanPackageDependsOn>
  </PropertyGroup>

  <!-- Dépendances pour Package -->

  <PropertyGroup>
    <PackageDependsOn>
      <!--_ValidateMilestoneForPackage;-->
      _UpdateVersionNumber;
      _GetProjectsToPackage;
    </PackageDependsOn>
  </PropertyGroup>

  <Target Name="_BeforePackage" BeforeTargets="Package" DependsOnTargets="$(BeforePackageDependsOn)" />

  <PropertyGroup>
    <BeforePackageDependsOn>
      _CreateOutDir;
      _CreatePublishDir;
      _CreatePackageDir
    </BeforePackageDependsOn>
  </PropertyGroup>

  <Target Name="_AfterPackage" AfterTargets="Package" DependsOnTargets="$(AfterPackageDependsOn)" />

  <PropertyGroup>
    <AfterPackageDependsOn>
      _VerifyBuildOutputs;
      _VerifyPublishOutputs;
      _Package
    </AfterPackageDependsOn>
  </PropertyGroup>

  <!-- ### Cibles privées -->

  <!-- Répertoires temporaires -->

  <Target Name="_CreateOutDir">
    <MakeDir Directories="$(OutDir)" Condition="!Exists($(OutDir))" />
  </Target>

  <Target Name="_CreatePublishDir">
    <MakeDir Directories="$(PublishDir)" Condition="!Exists($(PublishDir))" />
  </Target>

  <Target Name="_CreatePackageDir">
    <MakeDir Directories="$(PackageDir)" Condition="!Exists($(PackageDir))" />
  </Target>

  <Target Name="_RemoveOutDir">
    <RemoveDir Directories="$(OutDir)" Condition="Exists($(OutDir))" />
  </Target>

  <Target Name="_RemovePublishDir">
    <RemoveDir Directories="$(PublishDir)" Condition="Exists($(PublishDir))" />
  </Target>

  <!-- Configuration des projets MSBuild -->

  <Target Name="_GetBuildProperties">
    <!-- Configuration de la compilation -->
    <PropertyGroup>
      <_BuildProperties>
        Configuration=$(Configuration);
        OutDir=$(OutDir);
        <!-- NB: D'après Microsoft.Common.targets, on doit utiliser OutDir plutôt qu'OutputPath.
             Pour les projets Web, utiliser la même valeur pour OutDir et OutputPath permet d'éviter
             la création de _PublishedWebsites. -->
        OutputPath=$(OutDir);
        BaseIntermediateOutputPath=$(BuildDir)\Tmp\;
        Platform=$(Platform);
        BuildInParallel=$(BuildInParallel)
      </_BuildProperties>
    </PropertyGroup>
  </Target>

  <Target Name="_GetMinifyProperties" DependsOnTargets="_GetSemVer">
    <!-- Configuration de la minification -->
    <PropertyGroup>
      <_MinifyProperties>
        YuiCompressorJar=$(YuiCompressorJar);
        GoogleClosureJar=$(GoogleClosureJar);
        SemVer=$(_SemVer)
      </_MinifyProperties>
    </PropertyGroup>
  </Target>

  <Target Name="_GetPackageProperties" DependsOnTargets="_GetBuildProperties">
    <!-- Configuration de la publication -->
    <PropertyGroup>
      <_PackageProperties>
        $(_BuildProperties);
        TransformsDir=$(TransformsDir);
        PackageTarget=$(PackageTarget);
        <!-- Configuration de MSBuild -->
        DeployOnBuild=true;
        <!-- On force la valeur de VisualStudioVersion, sinon MSBuild refuse de publier le projet -->
        VisualStudioVersion=11.0;

        <!-- Configuration commune à tous les profils de publication -->
        WebPublishMethod=FileSystem;
        DebugSymbols=true;
        DeleteAppCodeCompiledFiles=true;
        DeleteExistingFiles=true;
        DeployTarget=WebPublish;
        EnableUpdateable=false;
        ExcludeApp_Data=true;
        <!-- On garde aussi les fichiers debug des autres projets -->
        ExcludeGeneratedDebugSymbol=false;
        PrecompileBeforePublish=true;
        UseMerge=true;
        WDPMergeOption=MergeAllOutputsToASingleAssembly
      </_PackageProperties>
    </PropertyGroup>
  </Target>

  <!-- Listes des projets-->

  <Target Name="_GetProjectsToBuild" DependsOnTargets="_GetBuildProperties;_GetMinifyProperties">
    <!-- Liste des projets à compiler -->
    <ItemGroup>
      <_ProjectsToBuild Include="$(SourceDir)Chiffon.WebSite\assets\Chiffon.Assets.proj"
        Condition="'$(BuildAssets)' == 'true'">
        <AdditionalProperties>$(_MinifyProperties)</AdditionalProperties>
      </_ProjectsToBuild>

      <_ProjectsToBuild Include="$(RootDir)Chiffon.sln"
        Condition="'$(BuildSolution)' == 'true'">
        <AdditionalProperties>$(_BuildProperties)</AdditionalProperties>
      </_ProjectsToBuild>
    </ItemGroup>
  </Target>

  <Target Name="_GetProjectsToPackage" DependsOnTargets="_GetPackageProperties;_GetMinifyProperties">
    <!-- Liste des projets à publier (vers le système de fichier) -->
    <ItemGroup>
      <_ProjectsToPackage Include="$(SourceDir)Chiffon.WebSite\assets\Chiffon.Assets.proj"
        Condition="'$(PackageAssets)' == 'true'">
        <AdditionalProperties>
          $(_MinifyProperties);
          $(_PackageProperties);
          PublishUrl=$(PublishDir)wznw.org_chiffon\
        </AdditionalProperties>
      </_ProjectsToPackage>

      <_ProjectsToPackage Include="$(SourceDir)Chiffon.WebSite\Chiffon.WebSite.csproj"
        Condition="'$(PackageWebSite)' == 'true'">
        <AdditionalProperties>
          $(_PackageProperties);
          PublishUrl=$(PublishDir)pourquelmotifsimone.com\;
          PublishProfile=$(PublishProfileDir)Chiffon.WebSite.pubxml
        </AdditionalProperties>
      </_ProjectsToPackage>

      <_ProjectsToPackage Include="$(SourceDir)Chiffon.MediaSite\Chiffon.MediaSite.csproj"
        Condition="'$(PackageMediaSite)' == 'true'">
        <AdditionalProperties>
          $(_PackageProperties);
          PublishUrl=$(PublishDir)s.pourquelmotifsimone.com\;
          PublishProfile=$(PublishProfileDir)Chiffon.MediaSite.pubxml
        </AdditionalProperties>
      </_ProjectsToPackage>
    </ItemGroup>
  </Target>

  <!-- Récupération ou mise à jour dun numéro de version -->

  <Target Name="_GetSemVer">
    <!--- Récupération du numéro de version sémantique -->
    <GetSemVer VersionInfoXml="$(EtcDir)VersionInfo.xml">
      <Output PropertyName="_SemVer" TaskParameter="SemVer" />
    </GetSemVer>
  </Target>

  <Target Name="_UpdateVersionNumber">
    <UpdateVersion
      VersionInfoXml="$(EtcDir)VersionInfo.xml"
      AssemblyInfoTemplate="$(EtcDir)AssemblyInfo.Template.cs"
      AssemblyInfoFile="$(EtcDir)AssemblyInfo.Version.cs"
      Milestone="$(Milestone)">
    </UpdateVersion>
  </Target>

  <!-- Validation des paramètres -->

  <!--
  <Target Name="_ValidateMilestoneForBuild">
    <Error Text="The property 'Milestone' must be set to 'None'."
           Condition="'$(Milestone)' != 'None'"/>
  </Target>

  <Target Name="_ValidateMilestoneForPackage">
    <Error Text="The property 'Milestone' must be set to something different to 'None'."
           Condition="'$(Milestone)' == 'None'"/>
  </Target>
  -->

  <!-- Vérification des résultats -->

  <Target Name="_VerifyBuildOutputs" DependsOnTargets="GetPEVerify"
          Inputs="@(_BuildOutputs)"
          Outputs="$(RootDir).buildTime">
    <!--
    <ItemGroup>
      <_BinaryFiles Include="$(OutDir)**\Chiffon*.dll"
                    Exclude="$(OutDir)_PublishedWebsites\**\*"/>
    </ItemGroup>

    <RemoveDuplicates Inputs="@(_BinaryFiles)">
      <Output TaskParameter="Filtered" ItemName="_AssemblyFiles"/>
    </RemoveDuplicates>

    <Exec Command="$(PEVerifyExe) &quot;%(_AssemblyFiles.FullPath)&quot; /nologo /md /il /unique"
          ContinueOnError="false" />
    -->

    <Exec Command="$(PEVerifyExe) &quot;%(_BuildOutputs.FullPath)&quot; /nologo /md /il /unique"
          ContinueOnError="false" />

    <Touch Files="$(RootDir).buildTime" AlwaysCreate="true" />
  </Target>

  <Target Name="_VerifyPublishOutputs" DependsOnTargets="GetPEVerify">
    <ItemGroup>
      <_PublishOutputs Include="$(PublishDir)**\Chiffon.*.AspNet.dll" />
    </ItemGroup>

    <!-- NB: On ne vérifie pas les metadonnées car "aspnet_merge.exe" produit des assemblées
         "incorrectes" de ce point de vue là -->
    <Exec Command="$(PEVerifyExe) &quot;%(_PublishOutputs.FullPath)&quot; /nologo /il /unique"
          ContinueOnError="false" />
  </Target>

  <!-- Utilitaires -->

  <Target Name="_Package" DependsOnTargets="_GetSemVer">
    <PropertyGroup>
      <_PackageFile>$(PackageDir)chiffon-$(_SemVer)-$(PackageTarget).7z</_PackageFile>
    </PropertyGroup>

    <Delete Files="$(_PackageFile)" />
    <Exec Command="$(SevenZipExe) -mx9 a $(_PackageFile) $(PublishDir)*" ContinueOnError="false"/>
  </Target>

</Project>
